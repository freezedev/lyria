{"name":"Lyria","tagline":"Lightweight DOM-based game framework","body":"Lyria\r\n=====\r\n[![Build Status](https://travis-ci.org/freezedev/lyria.png?branch=master)](https://travis-ci.org/freezedev/lyria)\r\n[![Dependency Status](https://david-dm.org/freezedev/lyria.png)](https://david-dm.org/freezedev/lyria)\r\n[![devDependency Status](https://david-dm.org/freezedev/lyria/dev-status.png)](https://david-dm.org/freezedev/lyria#info=devDependencies)\r\n\r\nLightweight prototyping javascript game framework based on jQuery. \r\n\r\nThe Lyria template can be found here: https://github.com/freezedev/lyria-template\r\n\r\nIf you are looking for something more CoffeeScript, take a look at [Elyssa](https://github.com/elysion-powered/elyssa).  \r\nIf you are looking for something less game-related, take a look at [MilkSugar](https://github.com/freezedev/milksugar).\r\n\r\nGetting Lyria\r\n-------------\r\n\r\nIf you have Bower installed, simply do:\r\n`bower install lyria`  \r\n(If you don't have bower installed, simply do a `npm install -g bower` in the command-line of your choice. To learn more about Bower, go to http://bower.io)\r\n\r\nWarning\r\n-------\r\n\r\nLyria is currently being reworked and the API changed and still changes a lot. There are bugs. Documentation is incomplete.\r\n\r\n\r\n\r\n\r\nWhat does it look like?\r\n-----------------------\r\n\r\nFirst create a new game object.\r\n\r\n```javascript\r\ndefine('mygame', ['lyria/game'], function(Game) {\r\n  var myGame = new Game();\r\n});\r\n```\r\n\r\nLyria uses AMD modules extensively and it is very much recommended to use the AMD pattern for organizing your game as well.\r\n\r\nEvery game object (as in a `lyria/game` instance, not an actual game object) has a scene manager, a viewport and a preloader. The core of it all is the scene manger. (The scene manger in Lyria.js is quite similar to the one in [Elysion](https://github.com/freezedev/elysion).)  \r\nIf you are coming from a game developer background, you may already know what a scene is. A scene in a game enviroment can be a main menu, a settings screen or the game itself. Or in 2D point-and-click-adventure, a scene can by any location the character is traveling to.  \r\nSo in Lyria a scene is that as well, but seperated in a markup file, a data file and localization JSON file. Templating is build in through Handlebars.\r\n\r\n```javascript\r\ndefine('mygame', ['lyria/game'], function(Game) {\r\n  var myGame = new Game();\r\n  \r\n  myGame.director.add('myScene');\r\n});\r\n```\r\n\r\nOur scene called myScene might look this:  \r\n\r\n**1) scene.html**  \r\nThe markup of the scene  \r\n\r\n```html\r\n{{#if someText}}\r\n\t<span>{{someText}}</span>\r\n{{/if someText}}\r\n\r\n{{#each buttons}}\r\n\t<div id=\"{{id}}\">{{caption}}</div>\r\n{{/each buttons}}\r\n```\r\n\r\n**2) scene.js**  \r\nThe data section of a scene. You can use it to prepare data you want to display, calculate stuff or directly set the variables you want to show in the template.\r\n\r\n```javascript\r\n(function() {\r\n\r\n  var self = this;\r\n  \r\n  var buttonArray = [];\r\n  var button1 = \"button1\";\r\n  var button2 = \"button2\";\r\n\r\n  buttonArray.push({id: button1, caption: self.t(button1)});\r\n  buttonArray.push({id: button2, caption: self.t(button2)});\r\n\r\n  this.expose({\r\n    buttons: buttonArray,\r\n    someText: 'Hello there.'\r\n  });\r\n\r\n}).call(this);\r\n```\r\n\r\n**3) localization.json**  \r\nContains localized strings as a JSON file\r\n\r\n```json\r\n{\r\n\t\"en\": {\r\n\t\t\"button1\": \"This is the first button.\",\r\n\t\t\"button2\": \"This is the second button.\"\r\n\t},\r\n\t\"de\": {\r\n\t\t\"button1\": \"Das ist der erste Button.\",\r\n\t\t\"button2\": \"Das ist der zweite Button.\"\r\n\t}\r\n}\r\n```\r\n\r\nThe result will look this:\r\n\r\n```html\r\n<span>Hello there.</span>\r\n\r\n<div id=\"button1\">This is the first button.</div>\r\n<div id=\"button2\">This is the second button.</div>\r\n```\r\n\r\nAssuming you opened the web application in a browser with an english language pack. Opening the page in a browser with a german language pack will show this:\r\n\r\n```html\r\n<span>Hello there.</span>\r\n\r\n<div id=\"button1\">Das ist der erste Button.</div>\r\n<div id=\"button2\">Das ist der zweite Button.</div>\r\n```\r\n\r\nIf the page is opened with a browser in a language that is not supported (i.e. not defined in localization.json) the english version will be displayed, as english is the default fallback language in Lyria.\r\n\r\n\r\nOf course, this only a simple example of what you can do with scenes. You can also add partials, helper functions and directly bind events to elements.\r\n\r\n\r\nIf you are already have worked with the [CouchDB eventlys](https://github.com/jchris/evently), this concept might feel very familiar to you.\r\n\r\nFeatures\r\n--------\r\n\r\nHere is the plain old feature list:\r\n\r\n* Scene management\r\n* Data bindings\r\n* High-level abstraction to DOM elements (or you can directly mess with the DOM elements if you prefer)\r\n\r\nHow do I get started?\r\n---------------------\r\n\r\nYou are already half-way there. Either download the latest stable version, the current development version if you are feeling adventurous or clone this repository.  \r\nHead on over to the [wiki](https://github.com/freezedev/Lyria.js/wiki) to have step by step instructions on how to use this framework.\r\n\r\n\r\nWhat does Lyria mean?\r\n---------------------\r\n* It's \"freedom\" in albanian (free as in not proprietary, free as in open-source)\r\n* It's also a reference to Lyrium from Bioware's Dragon Age series, in which Lyrium is the essence for magic\r\n* It's a reference to Illyria, a powerful being from the TV series Angel\r\n\t\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}